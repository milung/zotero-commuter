<?xml version="1.0" encoding="utf-8"?>
<resources>

    <string name="create_versions_table">
        CREATE TABLE versions (
            _id INTEGER PRIMARY KEY AUTOINCREMENT,
            query TEXT UNIQUE ON CONFLICT REPLACE,
            version INTEGER)
    </string>

    <string name="create_tags_table">
        CREATE TABLE tags (
            _id INTEGER PRIMARY KEY AUTOINCREMENT,
            tag TEXT UNIQUE ON CONFLICT IGNORE,
            type INT
        )
    </string>

    <string name="create_persons_table">
        CREATE TABLE persons (
        _id INTEGER PRIMARY KEY AUTOINCREMENT,
        firstName TEXT,
        lastName TEXT,
        shortName TEXT,
        UNIQUE (firstName, lastName, shortName)  )
    </string>

    <string name="create_creators_table">
        CREATE TABLE IF NOT EXISTS creators (
        _id INTEGER PRIMARY KEY AUTOINCREMENT,
        type INTEGER,
        person REFERENCES persons (_id),
        UNIQUE ( type, person)  );
    </string>

    <string name="create_fields_table">
        CREATE TABLE IF NOT EXISTS fields (
        _id INTEGER PRIMARY KEY AUTOINCREMENT,
        type INTEGER,
        item INTEGER REFERENCES items (_id),
        value TEXT,
        UNIQUE ( item, type ) ON CONFLICT REPLACE )
    </string>

    <string name="create_relations_table">
        CREATE TABLE IF NOT EXISTS relations (
        _id INTEGER PRIMARY KEY AUTOINCREMENT,
        predicate TEXT,
        subject INTEGER REFERENCES items (_id),
        object TEXT,
        UNIQUE ( subject, predicate, object ) ON CONFLICT REPLACE )
    </string>

    <string name="create_items_to_creators_table">
        CREATE TABLE  IF NOT EXISTS items_to_creators (
        item INTEGER REFERENCES items (_id),
        creator INTEGER REFERENCES creators (_id),
        UNIQUE (item,creator) ON CONFLICT REPLACE)
    </string>

    <string name="create_items_to_tags_table">
        CREATE TABLE  IF NOT EXISTS items_to_tags (
        item INTEGER REFERENCES items (_id),
        tag INTEGER REFERENCES tags (_id),
        UNIQUE (item,tag) ON CONFLICT REPLACE)
    </string>

    <string name="create_items_to_collections_table">
        CREATE TABLE  IF NOT EXISTS items_to_collections (
        item INTEGER REFERENCES items (_id),
        collection INTEGER REFERENCES collections (_id),
        UNIQUE (item,collection) ON CONFLICT REPLACE)
    </string>

    <string name="create_collections_table">
        CREATE TABLE IF NOT EXISTS collections (
            _id INTEGER PRIMARY KEY AUTOINCREMENT,
            key TEXT UNIQUE,
            version INTEGER,
            name TEXT,
            parent TEXT,
            synced INTEGER)
    </string>

    <string name="create_items_table">
        CREATE TABLE IF NOT EXISTS items (
        _id INTEGER PRIMARY KEY AUTOINCREMENT,
        type INTEGER,
        key TEXT UNIQUE,
        version INTEGER,
        title TEXT,
        parent INTEGER REFERENCES items (_id),
        synced INTEGER )
    </string>

    <string name="get_item_creators">
        SELECT creators._id, creators.type, persons._id AS person_id
        FROM items_to_creators
        LEFT JOIN creators ON items_to_creators.creator = creators._id
        LEFT JOIN persons ON creators.person = persons._id
        WHERE items_to_creators.item=?
    </string>

    <string name="get_collection_items">
        SELECT items._id, items.key, items.version, items.type, items.synced, items.title, items.parent
        FROM items
        LEFT JOIN items_to_collections ON items._id=items_to_collections.item
        LEFT JOIN collections ON items_to_collections.collection=collections._id
        WHERE {SYNC_FILTER} AND items.parent IS NULL AND collections._id=?
        ORDER BY items.title
    </string>

    <string name="get_library_items">
        SELECT  items._id, items.key, items.version, items.type, items.synced, items.title, items.parent
        FROM items
        LEFT JOIN items_to_collections ON items._id=items_to_collections.item
        LEFT JOIN collections ON items_to_collections.collection=collections._id
        WHERE {SYNC_FILTER} AND items.parent IS NULL
        ORDER BY items.title
    </string>

    <string name="get_item_children">
        SELECT  items._id, items.key, items.version, items.type, items.synced, items.title, items.parent
        FROM items
        WHERE {SYNC_FILTER} AND items.parent=?
        ORDER BY items.title
    </string>

    <string name="get_item_tags">
        SELECT  tags._id, tags.tag, tags.type
        FROM items
        LEFT JOIN items_to_tags ON items._id = items_to_tags.item
        LEFT JOIN tags ON items_to_tags.tag = tags._id
        WHERE items._id=?
        ORDER BY tags.tag
    </string>


</resources>